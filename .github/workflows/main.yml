name: Build Release APK

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 1Ô∏è‚É£ Clonar el repositorio
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # üî• Clona todo el historial, necesario para gradle wrapper

    # 2Ô∏è‚É£ Configurar JDK 17
    - name: Setup JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'gradle'

    # 3Ô∏è‚É£ Generar gradlew si no existe
    - name: Generate Gradle Wrapper
      run: |
        if [ ! -f "./gradlew" ]; then
          echo "üì¶ Generando gradlew..."
          ./gradle wrapper --gradle-version=8.4 --distribution-type=bin
          # Si no hay gradle instalado, usamos una alternativa
          if [ ! -f "./gradlew" ]; then
            gradle wrapper --gradle-version=8.4 --distribution-type=bin
          fi
        fi
        
        # Asegurar que gradlew tenga permisos de ejecuci√≥n
        chmod +x ./gradlew
        echo "‚úÖ gradlew listo"
        ls -la gradlew

    # 4Ô∏è‚É£ Restaurar keystore desde secreto
    - name: Restore Keystore
      run: |
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > ollama-release.keystore
        if [ -f "ollama-release.keystore" ]; then
          echo "‚úÖ Keystore creado exitosamente"
          ls -la ollama-release.keystore
        else
          echo "‚ùå ERROR: No se pudo crear el keystore"
          exit 1
        fi

    # 5Ô∏è‚É£ Configurar variables de entorno
    - name: Set environment variables
      run: |
        echo "KEYSTORE_FILE=$PWD/ollama-release.keystore" >> $GITHUB_ENV
        echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
        echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> $GITHUB_ENV
        echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> $GITHUB_ENV

    # 6Ô∏è‚É£ Preparar gradlew (ahora seguro que existe)
    - name: Prepare gradlew
      run: |
        chmod +x ./gradlew
        # Convertir a line endings LF (Linux)
        sudo apt-get update && sudo apt-get install -y dos2unix
        dos2unix ./gradlew
        echo "‚úÖ gradlew preparado"
        ./gradlew --version

    # 7Ô∏è‚É£ Construir APK de release
    - name: Build Release APK
      run: |
        ./gradlew assembleRelease \
          -Pandroid.injected.signing.store.file="$KEYSTORE_FILE" \
          -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \
          -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
          -Pandroid.injected.signing.key.password="$KEY_PASSWORD"

    # 8Ô∏è‚É£ Verificar APK generado
    - name: Verify APK was built
      run: |
        # Buscar el APK en diferentes ubicaciones posibles
        APK_PATH=$(find . -name "*release*.apk" -type f | head -1)
        if [ -f "$APK_PATH" ]; then
          echo "‚úÖ APK creado exitosamente: $APK_PATH"
          ls -la $(dirname "$APK_PATH")
        else
          echo "‚ùå No se encontr√≥ el APK. Buscando en todo el proyecto:"
          find . -name "*.apk" -type f
          exit 1
        fi

    # 9Ô∏è‚É£ Subir APK como artefacto
    - name: Upload Release APK
      uses: actions/upload-artifact@v4
      with:
        name: Ollama-Server
        path: app/build/outputs/apk/release/*.apk
