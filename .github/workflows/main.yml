name: Build Release APK

on:
  push:
    branches: [main, mejoras]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Clonar el repositorio
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configurar JDK 17
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
          cache: "gradle"

      # 3Ô∏è‚É£ Verificar gradlew o generarlo (CORREGIDO)
      - name: Check Gradle Wrapper
        run: |
          if [ ! -f "./gradlew" ]; then
            echo "‚ùå ERROR: No se encontr√≥ gradlew. Gener√°ndolo..."

            # Descargar gradlew
            wget https://raw.githubusercontent.com/gradle/gradle/master/gradlew
            chmod +x ./gradlew

            # Crear directorios necesarios
            mkdir -p gradle/wrapper

            # Descargar gradle-wrapper.jar
            wget -O gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/master/gradle/wrapper/gradle-wrapper.jar

            # Crear gradle-wrapper.properties (CORREGIDO)
            cat > gradle/wrapper/gradle-wrapper.properties <<- 'EOF'
            distributionBase=GRADLE_USER_HOME
            distributionPath=wrapper/dists
            distributionUrl=https\://services.gradle.org/distributions/gradle-8.7-bin.zip
            zipStoreBase=GRADLE_USER_HOME
            zipStorePath=wrapper/dists 
            EOF

            echo "‚úÖ Gradle Wrapper generado autom√°ticamente"
          else
            echo "‚úÖ Gradle Wrapper encontrado"
            chmod +x ./gradlew
          fi

      # 4Ô∏è‚É£ Restaurar keystore desde secreto
      - name: Restore Keystore
        run: |
          if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > ollama-release.keystore
            if [ -f "ollama-release.keystore" ]; then
              echo "‚úÖ Keystore creado exitosamente"
              ls -la ollama-release.keystore
            else
              echo "‚ùå ERROR: No se pudo crear el keystore"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è  No hay keystore configurado. Generando uno temporal..."
            keytool -genkey -v -keystore temp.keystore -alias androidkey -keyalg RSA -keysize 2048 -validity 10000 -storepass android -keypass android -dname "CN=Android Debug, O=Android, C=US"
            echo "‚úÖ Keystore temporal generado para testing"
          fi

      # 5Ô∏è‚É£ Configurar variables de entorno
      - name: Set environment variables
        run: |
          if [ -f "ollama-release.keystore" ]; then
            echo "KEYSTORE_FILE=$PWD/ollama-release.keystore" >> $GITHUB_ENV
            echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD || 'android' }}" >> $GITHUB_ENV
            echo "KEY_ALIAS=${{ secrets.KEY_ALIAS || 'androidkey' }}" >> $GITHUB_ENV
            echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD || 'android' }}" >> $GITHUB_ENV
          else
            echo "KEYSTORE_FILE=$PWD/temp.keystore" >> $GITHUB_ENV
            echo "KEYSTORE_PASSWORD=android" >> $GITHUB_ENV
            echo "KEY_ALIAS=androidkey" >> $GITHUB_ENV
            echo "KEY_PASSWORD=android" >> $GITHUB_ENV
          fi
          echo "Variables configuradas:"
          echo "KEYSTORE_FILE: $KEYSTORE_FILE"
          echo "KEY_ALIAS: $KEY_ALIAS"

      # 6Ô∏è‚É£ Construir APK
      - name: Build Release APK
        run: |
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file="$KEYSTORE_FILE" \
            -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \
            -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
            -Pandroid.injected.signing.key.password="$KEY_PASSWORD"

      # 7Ô∏è‚É£ Verificar APK
      - name: Verify APK was built
        run: |
          APK_PATH="app/build/outputs/apk/release/Ollama-Server.apk"
          if [ -f "$APK_PATH" ]; then
            echo "‚úÖ APK creado exitosamente!"
            echo "üì¶ Tama√±o: $(du -h "$APK_PATH" | cut -f1)"
            echo "üìã Contenido del directorio:"
            ls -la app/build/outputs/apk/release/
          else
            echo "‚ùå No se encontr√≥ el APK. Buscando..."
            find . -name "*.apk" -type f
            echo "Estructura de directorios:"
            find . -name "build" -type d | head -10
            exit 1
          fi

      # 8Ô∏è‚É£ Subir APK como artefacto
      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: Ollama-Server
          path: app/build/outputs/apk/release/*.apk
